**Instructions**: To enable automated validation before or during AAIPCPTF pipeline runs as per: https://raw.githubusercontent.com/moricheeka/AAIPCPTF/refs/heads/main/AAIPCPTF.md , operationalize the following JSON Schema ("AAIPCPTF Metadata Schema"):

```json
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "AAIPCPTF Metadata Schema",
  "type": "object",
  "properties": {
    "framework_version": { "type": "string", "const": "AAIPCPTF_v1.0" },
        "source_details": {
      "type": "object",
      "properties": {
        "text_length": {"type": "integer", "minimum": 0},
        "complexity_metrics": {"type": "object"},
        "metadata": {
          "type": "object",
          "properties": {
            "author": {"type": "string"},
            "publication_date": {"type": "string", "format": "date"},
            "domain": {"type": "string"}
          },
          "required": ["author", "publication_date", "domain"],
          "additionalProperties": true
        }
      },
      "required": ["text_length", "complexity_metrics", "metadata"],
      "additionalProperties": true
    },
    "category_label": {"type": "string"},
    "confidence": {"type": "number", "minimum": 0, "maximum": 1},
    "tonal_profile": {"type": "object"},
    "concept_list": {"type": "array", "items": {"type": "string"}},
    "disambiguation_map": {"type": "object", "additionalProperties": {"type": "string"}},
    "embeddings": {
      "type": "object",
      "properties": {
        "semantic": {"type": "array", "items": {"type": "number"}},
        "style": {"type": "array", "items": {"type": "number"}}
      },
      "required": ["semantic", "style"],
      "additionalProperties": false
    },
    /* ── NEW FIELD: runtime toggle for IDDA ───────────────── */
    "mode_state": {
  "type": "object",
  "properties": {
    "idda":          { "type": "string", "enum": ["on","pause","off"] },
    "idda_protocol": { "type": "string", "enum": ["on","off"] }      // NEW
  },
  "additionalProperties": true
},
    /* ─────────────────────────────────────────────────────── */
    "chunks": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "chunk_id": {"type": "string"},
          "text": {"type": "string"},
          "text_length": {"type": "integer", "minimum": 0},
          "complexity_metrics": {"type": "object"},
          "tonal_profile": {"type": "object"},
          "eccentricity_score": {"type": "number", "minimum": 0, "maximum": 1},
          "embeddings": {
            "type": "object",
            "properties": {
              "semantic": {"type": "array", "items": {"type": "number"}},
              "style": {"type": "array", "items": {"type": "number"}}
            },
            "required": ["semantic", "style"],
            "additionalProperties": false
          },
  
          "concept_list": {"type": "array", "items": {"type": "string"}},
          "disambiguation_map": {"type": "object", "additionalProperties": {"type": "string"}},
          "neologisms": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "term": {"type": "string"},
                "contexts": {"type": "array", "items": {"type": "string"}},
                "equivalents": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "candidate": {"type": "string"},
                      "confidence": {"type": "number", "minimum": 0, "maximum": 1}
                    },
                    "required": ["candidate", "confidence"],
                    "additionalProperties": false
                  }
                }
              },
              "required": ["term", "contexts", "equivalents"],
              "additionalProperties": false
            }
          },
          "adaptation_actions": {"type": "array", "items": {"type": "string"}},
          "iteration_logs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "iteration_id": {"type": "integer", "minimum": 1},
                "step": {"type": "string"},
                "metrics": {"type": "object"},
                "decisions": {"type": "string"}
              },
              "required": ["iteration_id", "step", "metrics", "decisions"],
              "additionalProperties": true
            }
          },
          "human_feedback": {"type": "object"},
          "pipeline_parameters": {"type": "object"}
        },
        "required": ["chunk_id", "text_length", "eccentricity_score", "embeddings"],
        "additionalProperties": true
      }
    },
    "neologisms": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "term": {"type": "string"},
          "contexts": {"type": "array", "items": {"type": "string"}},
          "equivalents": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "candidate": {"type": "string"},
                "confidence": {"type": "number", "minimum": 0, "maximum": 1}
              },
              "required": ["candidate", "confidence"],
              "additionalProperties": false
            }
          }
        },
        "required": ["term", "contexts", "equivalents"],
        "additionalProperties": false
      }
    },
    "pipeline_parameters": {
      "type": "object",
      "properties": {
        "precategorization_threshold": {"type": "number", "minimum": 0, "maximum": 1},
        "eccentricity_threshold": {"type": "number", "minimum": 0, "maximum": 1},
        "back_translation_similarity_threshold": {"type": "number", "minimum": 0, "maximum": 1},
        "max_iterations": {"type": "integer", "minimum": 1},
        "model_settings": {"type": "object"}
      },
      "required": ["precategorization_threshold", "eccentricity_threshold", "back_translation_similarity_threshold", "max_iterations", "model_settings"],
      "additionalProperties": true
    },
    "iteration_logs": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "iteration_id": {"type": "integer", "minimum": 1},
          "step": {"type": "string"},
          "metrics": {"type": "object"},
          "decisions": {"type": "string"}
        },
        "required": ["iteration_id", "step", "metrics", "decisions"],
        "additionalProperties": true
      }
    },
    "human_feedback": {"type": "object"},
    "final_quality_scores": {
      "type": "object",
      "properties": {
        "overall_fidelity": {"type": "number", "minimum": 0, "maximum": 1},
        "coherence_score": {"type": "number", "minimum": 0, "maximum": 1},
        "style_consistency": {"type": "number", "minimum": 0, "maximum": 1}
      },
      "required": ["overall_fidelity", "coherence_score", "style_consistency"],
      "additionalProperties": true
    },
    "error_logs": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "error_code": {"type": "string"},
          "message": {"type": "string"},
          "timestamp": {"type": "string", "format": "date-time"}
        },
        "required": ["error_code", "message", "timestamp"],
        "additionalProperties": true
      }
    }
  },
  "required": ["framework_version", "source_details", "category_label", "confidence", "embeddings", "pipeline_parameters", "mode_state"],
  "additionalProperties": true
}
```
#### 2.1 Integrating the ChatGPT System Prompt Template

- **Purpose**: Ensure the orchestration metadata and the System Prompt Template work in lock-step.
- **Instructions**:
  1. **Injection**  
     - When spinning up a ChatGPT session, first inject the Add-On 3 System Prompt block (between <!-- SYSTEM_PROMPT_START --> and <!-- SYSTEM_PROMPT_END --> in the github AAIPCPTF document in this URL: https://raw.githubusercontent.com/moricheeka/AAIPCPTF/refs/heads/main/AAIPCPTF.md ) as `aaipcptf_system_prompt`.
     - Immediately thereafter, send a hidden “function‐call” to instantiate the metadata object in ChatGPT’s memory:
       ```json
       { "name": "init_metadata", "arguments": aaipcptf_metadata }
       ```
  2. **Runtime Updates**  
     - After each hidden pipeline step, call `update_metadata` with:
       ```json
       {
         "step": "<step_name>",
         "updates": { /* fields modified in aaipcptf_metadata */ }
       }
       ```
  3. **Finalization**  
     - Before delivering the final user-facing output, call `export_metadata` to serialize `aaipcptf_metadata` back into a JSON attachment or hidden log.

